import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as svg_element, e as element, b as space, c as claim_element, f as children, g as detach_dev, h as claim_space, x as xlink_attr, j as add_location, k as attr_dev, l as insert_dev, m as append_dev, n as noop, o as validate_each_argument, t as text, p as claim_text, q as destroy_each, r as set_data_dev, u as create_component, w as query_selector_all, y as claim_component, z as mount_component, A as transition_in, B as transition_out, C as destroy_component } from './client.6c6b8b81.js';
import { b as baseUrl, T as Title } from './Title.2b3f0dcd.js';

/* src\components\Social.svelte generated by Svelte v3.24.1 */
const file = "src\\components\\Social.svelte";

function create_fragment(ctx) {
	let div;
	let a0;
	let svg0;
	let use0;
	let t0;
	let a1;
	let svg1;
	let use1;
	let t1;
	let a2;
	let svg2;
	let use2;

	const block = {
		c: function create() {
			div = element("div");
			a0 = element("a");
			svg0 = svg_element("svg");
			use0 = svg_element("use");
			t0 = space();
			a1 = element("a");
			svg1 = svg_element("svg");
			use1 = svg_element("use");
			t1 = space();
			a2 = element("a");
			svg2 = svg_element("svg");
			use2 = svg_element("use");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			a0 = claim_element(div_nodes, "A", {
				href: true,
				rel: true,
				target: true,
				class: true
			});

			var a0_nodes = children(a0);
			svg0 = claim_element(a0_nodes, "svg", { class: true }, 1);
			var svg0_nodes = children(svg0);
			use0 = claim_element(svg0_nodes, "use", { "xlink:href": true }, 1);
			children(use0).forEach(detach_dev);
			svg0_nodes.forEach(detach_dev);
			a0_nodes.forEach(detach_dev);
			t0 = claim_space(div_nodes);

			a1 = claim_element(div_nodes, "A", {
				href: true,
				rel: true,
				target: true,
				class: true
			});

			var a1_nodes = children(a1);
			svg1 = claim_element(a1_nodes, "svg", { class: true }, 1);
			var svg1_nodes = children(svg1);
			use1 = claim_element(svg1_nodes, "use", { "xlink:href": true }, 1);
			children(use1).forEach(detach_dev);
			svg1_nodes.forEach(detach_dev);
			a1_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);

			a2 = claim_element(div_nodes, "A", {
				href: true,
				rel: true,
				target: true,
				class: true
			});

			var a2_nodes = children(a2);
			svg2 = claim_element(a2_nodes, "svg", { class: true }, 1);
			var svg2_nodes = children(svg2);
			use2 = claim_element(svg2_nodes, "use", { "xlink:href": true }, 1);
			children(use2).forEach(detach_dev);
			svg2_nodes.forEach(detach_dev);
			a2_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			xlink_attr(use0, "xlink:href", "sprite.svg#icon-linkedin");
			add_location(use0, file, 30, 6, 631);
			attr_dev(svg0, "class", "svelte-16psafg");
			add_location(svg0, file, 29, 4, 618);
			attr_dev(a0, "href", "https://www.linkedin.com/in/olawale-oyeyipo-7a5b36b7/");
			attr_dev(a0, "rel", "external noopener noreferrer");
			attr_dev(a0, "target", "_blank");
			attr_dev(a0, "class", "svelte-16psafg");
			add_location(a0, file, 25, 2, 482);
			xlink_attr(use1, "xlink:href", "sprite.svg#icon-stackoverflow");
			add_location(use1, file, 38, 6, 847);
			attr_dev(svg1, "class", "svelte-16psafg");
			add_location(svg1, file, 37, 4, 834);
			attr_dev(a1, "href", "https://stackoverflow.com/users/7024331/oyeyipowale");
			attr_dev(a1, "rel", "external noopener noreferrer");
			attr_dev(a1, "target", "_blank");
			attr_dev(a1, "class", "svelte-16psafg");
			add_location(a1, file, 33, 2, 700);
			xlink_attr(use2, "xlink:href", "sprite.svg#icon-github");
			add_location(use2, file, 46, 6, 1047);
			attr_dev(svg2, "class", "svelte-16psafg");
			add_location(svg2, file, 45, 4, 1034);
			attr_dev(a2, "href", "https://github.com/oyeyipowale");
			attr_dev(a2, "rel", "external noopener noreferrer");
			attr_dev(a2, "target", "_blank");
			attr_dev(a2, "class", "svelte-16psafg");
			add_location(a2, file, 41, 2, 921);
			attr_dev(div, "class", "social svelte-16psafg");
			add_location(div, file, 24, 0, 458);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a0);
			append_dev(a0, svg0);
			append_dev(svg0, use0);
			append_dev(div, t0);
			append_dev(div, a1);
			append_dev(a1, svg1);
			append_dev(svg1, use1);
			append_dev(div, t1);
			append_dev(div, a2);
			append_dev(a2, svg2);
			append_dev(svg2, use2);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Social> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Social", $$slots, []);
	$$self.$capture_state = () => ({ svg_element });
	return [];
}

class Social extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Social",
			options,
			id: create_fragment.name
		});
	}
}

/* src\components\Articles.svelte generated by Svelte v3.24.1 */

const file$1 = "src\\components\\Articles.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (46:2) {#if !isEmpty}
function create_if_block(ctx) {
	let h3;
	let t0;
	let t1;
	let ul;
	let each_value = /*items*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h3 = element("h3");
			t0 = text("Blog");
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t0 = claim_text(h3_nodes, "Blog");
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h3, "class", "svelte-y30yup");
			add_location(h3, file$1, 47, 4, 905);
			attr_dev(ul, "class", "svelte-y30yup");
			add_location(ul, file$1, 49, 4, 951);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*items*/ 1) {
				each_value = /*items*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(46:2) {#if !isEmpty}",
		ctx
	});

	return block;
}

// (51:10) {#each items as post}
function create_each_block(ctx) {
	let li;
	let a;
	let h4;
	let t0_value = /*post*/ ctx[4].title + "";
	let t0;
	let a_href_value;
	let t1;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			h4 = element("h4");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { rel: true, href: true, class: true });
			var a_nodes = children(a);
			h4 = claim_element(a_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t0 = claim_text(h4_nodes, t0_value);
			h4_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h4, "class", "svelte-y30yup");
			add_location(h4, file$1, 53, 20, 1086);
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = "blog/" + /*post*/ ctx[4].slug);
			attr_dev(a, "class", "svelte-y30yup");
			add_location(a, file$1, 52, 16, 1024);
			add_location(li, file$1, 51, 12, 1002);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, h4);
			append_dev(h4, t0);
			append_dev(li, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*items*/ 1 && t0_value !== (t0_value = /*post*/ ctx[4].title + "")) set_data_dev(t0, t0_value);

			if (dirty & /*items*/ 1 && a_href_value !== (a_href_value = "blog/" + /*post*/ ctx[4].slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(51:10) {#each items as post}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let if_block = !/*isEmpty*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "wrapper svelte-y30yup");
			add_location(div, file$1, 44, 0, 838);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (!/*isEmpty*/ ctx[1]) if_block.p(ctx, dirty);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { articles } = $$props;
	let articleList = articles.results;
	const isEmpty = articleList == undefined || articleList.length == 0;
	const writable_props = ["articles"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Articles> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Articles", $$slots, []);

	$$self.$$set = $$props => {
		if ("articles" in $$props) $$invalidate(2, articles = $$props.articles);
	};

	$$self.$capture_state = () => ({ articles, articleList, isEmpty, items });

	$$self.$inject_state = $$props => {
		if ("articles" in $$props) $$invalidate(2, articles = $$props.articles);
		if ("articleList" in $$props) $$invalidate(3, articleList = $$props.articleList);
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	let items;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	 $$invalidate(0, items = articleList);
	return [items, isEmpty, articles];
}

class Articles extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { articles: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Articles",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*articles*/ ctx[2] === undefined && !("articles" in props)) {
			console.warn("<Articles> was created without expected prop 'articles'");
		}
	}

	get articles() {
		throw new Error("<Articles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set articles(value) {
		throw new Error("<Articles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\routes\index.svelte generated by Svelte v3.24.1 */
const file$2 = "src\\routes\\index.svelte";

// (66:2) <Title>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Home");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Home");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(66:2) <Title>",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let title;
	let t0;
	let div1;
	let div0;
	let h1;
	let span0;
	let t1;
	let t2;
	let span1;
	let t3;
	let t4;
	let p;
	let t5;
	let t6;
	let social;
	let t7;
	let articles_1;
	let current;

	title = new Title({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	social = new Social({ $$inline: true });

	articles_1 = new Articles({
			props: { articles: /*articles*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(title.$$.fragment);
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			span0 = element("span");
			t1 = text("Hi, I am");
			t2 = space();
			span1 = element("span");
			t3 = text("Wale Oyeyipo");
			t4 = space();
			p = element("p");
			t5 = text("Software Engineer/Writer who loves to solve problems and teach.");
			t6 = space();
			create_component(social.$$.fragment);
			t7 = space();
			create_component(articles_1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1stbuj8\"]", document.head);
			claim_component(title.$$.fragment, head_nodes);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", {});
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			span0 = claim_element(h1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t1 = claim_text(span0_nodes, "Hi, I am");
			span0_nodes.forEach(detach_dev);
			t2 = claim_space(h1_nodes);
			span1 = claim_element(h1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t3 = claim_text(span1_nodes, "Wale Oyeyipo");
			span1_nodes.forEach(detach_dev);
			h1_nodes.forEach(detach_dev);
			t4 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t5 = claim_text(p_nodes, "Software Engineer/Writer who loves to solve problems and teach.");
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			claim_component(social.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			claim_component(articles_1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "sub svelte-ej2xat");
			add_location(span0, file$2, 71, 6, 1496);
			attr_dev(span1, "class", "main svelte-ej2xat");
			add_location(span1, file$2, 72, 6, 1537);
			attr_dev(h1, "class", "svelte-ej2xat");
			add_location(h1, file$2, 70, 4, 1484);
			attr_dev(p, "class", "svelte-ej2xat");
			add_location(p, file$2, 74, 4, 1592);
			add_location(div0, file$2, 69, 2, 1473);
			attr_dev(div1, "class", "jumbotron svelte-ej2xat");
			add_location(div1, file$2, 68, 0, 1446);
		},
		m: function mount(target, anchor) {
			mount_component(title, document.head, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(h1, span0);
			append_dev(span0, t1);
			append_dev(h1, t2);
			append_dev(h1, span1);
			append_dev(span1, t3);
			append_dev(div0, t4);
			append_dev(div0, p);
			append_dev(p, t5);
			append_dev(div1, t6);
			mount_component(social, div1, null);
			insert_dev(target, t7, anchor);
			mount_component(articles_1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const title_changes = {};

			if (dirty & /*$$scope*/ 2) {
				title_changes.$$scope = { dirty, ctx };
			}

			title.$set(title_changes);
			const articles_1_changes = {};
			if (dirty & /*articles*/ 1) articles_1_changes.articles = /*articles*/ ctx[0];
			articles_1.$set(articles_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(title.$$.fragment, local);
			transition_in(social.$$.fragment, local);
			transition_in(articles_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(title.$$.fragment, local);
			transition_out(social.$$.fragment, local);
			transition_out(articles_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(title);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_component(social);
			if (detaching) detach_dev(t7);
			destroy_component(articles_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	const response = await this.fetch(`${baseUrl}/api/posts/`, {
		method: "GET",
		headers: {
			"Content-Type": "application/json",
			Accept: "application/json"
		}
	});

	const articles = await response.json();

	if (articles.error) {
		return this.error(response.status, articles.error);
	}

	return { articles };
}

function instance$2($$self, $$props, $$invalidate) {
	let { articles } = $$props;
	const writable_props = ["articles"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	$$self.$$set = $$props => {
		if ("articles" in $$props) $$invalidate(0, articles = $$props.articles);
	};

	$$self.$capture_state = () => ({
		baseUrl,
		preload,
		Title,
		Social,
		Articles,
		articles
	});

	$$self.$inject_state = $$props => {
		if ("articles" in $$props) $$invalidate(0, articles = $$props.articles);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [articles];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { articles: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*articles*/ ctx[0] === undefined && !("articles" in props)) {
			console.warn("<Routes> was created without expected prop 'articles'");
		}
	}

	get articles() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set articles(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNDRkZjMwYzguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FydGljbGVzLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XHJcbiAgZXhwb3J0IGxldCBhcnRpY2xlcztcclxuXHJcbiAgbGV0IGFydGljbGVMaXN0ID0gYXJ0aWNsZXMucmVzdWx0cztcclxuICBjb25zdCBpc0VtcHR5ID0gYXJ0aWNsZUxpc3QgPT0gdW5kZWZpbmVkIHx8IGFydGljbGVMaXN0Lmxlbmd0aCA9PSAwO1xyXG5cclxuICAkOiBpdGVtcyA9IGFydGljbGVMaXN0O1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxyXG4gIC53cmFwcGVyIHtcclxuICAgIG1hcmdpbjogdmFyKC0tc3MtcmVtLTkpIDA7XHJcbiAgICBncmlkLWNvbHVtbjogY2VudGVyLXN0YXJ0IC8gY2VudGVyLWVuZDtcclxuXHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgcm93LWdhcDogdmFyKC0tc3MtcmVtLTgpO1xyXG4gICAganVzdGlmeS1pdGVtczogc3RhcnQ7XHJcbiAgfVxyXG5cclxuICBoMyB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBwYWRkaW5nOiAwIDAuNnJlbTtcclxuICAgIC8vIGJveC1zaGFkb3c6IDAuNXJlbSAwLjVyZW0gMCAwIHZhcigtLWNvbG9yLXByaW1hcnktOTAwKTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLXByaW1hcnktOTAwKTtcclxuICAgIGNvbG9yOiB2YXIoLS1jb2xvci1wcmltYXJ5LTEwMCk7XHJcbiAgfVxyXG5cclxuICBoNCB7XHJcbiAgICBsaW5lLWhlaWdodDogdmFyKC0tbGluZS1oZWlnaHQpO1xyXG4gIH1cclxuXHJcbiAgdWwge1xyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIHJvdy1nYXA6IHZhcigtLXNzLXJlbS04KTtcclxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgfVxyXG5cclxuICBhIHtcclxuICAgICY6bGluayxcclxuICAgICY6dmlzaXRlZCB7XHJcbiAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci1wcmltYXJ5LTcwMCk7XHJcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICAmOmhvdmVyLFxyXG4gICAgJjphY3RpdmUge1xyXG4gICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcclxuICAgICAgY29sb3I6IGN1cnJlbnRDb2xvcjtcclxuICAgIH1cclxuICB9XHJcbjwvc3R5bGU+XHJcblxyXG48ZGl2IGNsYXNzPVwid3JhcHBlclwiPlxyXG4gIHsjaWYgIWlzRW1wdHl9XHJcbiAgICA8IS0tIEhlYWRpbmcgLS0+XHJcbiAgICA8aDM+QmxvZzwvaDM+XHJcbiAgICA8IS0tIEFydGljbGUgbGlzdCAtLT5cclxuICAgIDx1bD5cclxuICAgICAgICAgIHsjZWFjaCBpdGVtcyBhcyBwb3N0fVxyXG4gICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8YSByZWw9cHJlZmV0Y2ggaHJlZj1cImJsb2cve3Bvc3Quc2x1Z31cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDQ+e3Bvc3QudGl0bGV9PC9oND5cclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgIHsvZWFjaH1cclxuICAgICAgICA8L3VsPlxyXG4gIHsvaWZ9XHJcbjwvZGl2PlxyXG4iLCI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cclxuICBpbXBvcnQgeyBiYXNlVXJsIH0gZnJvbSBcIi4vX2NvbW1vbi9jb25mXCI7XHJcblxyXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHBhZ2UsIHNlc3Npb24pIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaChgJHtiYXNlVXJsfS9hcGkvcG9zdHMvYCwge1xyXG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgYXJ0aWNsZXMgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcblxyXG4gICAgaWYgKGFydGljbGVzLmVycm9yKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVycm9yKHJlc3BvbnNlLnN0YXR1cywgYXJ0aWNsZXMuZXJyb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGFydGljbGVzLFxyXG4gICAgfTtcclxuICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHNjcmlwdD5cclxuICBpbXBvcnQgVGl0bGUgZnJvbSBcIi4uL2NvbXBvbmVudHMvVGl0bGUuc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IFNvY2lhbCBmcm9tIFwiLi4vY29tcG9uZW50cy9Tb2NpYWwuc3ZlbHRlXCI7XHJcbiAgaW1wb3J0IEFydGljbGVzIGZyb20gXCIuLi9jb21wb25lbnRzL0FydGljbGVzLnN2ZWx0ZVwiO1xyXG5cclxuICBleHBvcnQgbGV0IGFydGljbGVzO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxyXG4gIGgxIHtcclxuICAgIGxpbmUtaGVpZ2h0OiB2YXIoLS1saW5lLWhlaWdodC1zbSk7XHJcblxyXG4gICAgPiBzcGFuIHtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB9XHJcblxyXG4gICAgLnN1YiB7XHJcbiAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc3MtcmVtLTcpO1xyXG4gICAgICBjb2xvcjogdmFyKC0tY29sb3ItcHJpbWFyeS00MDApO1xyXG4gICAgfVxyXG4gICAgLm1haW4ge1xyXG4gICAgICBmb250LXNpemU6IHZhcigtLXNzLXJlbS05KTtcclxuICAgIH1cclxuICB9XHJcbiAgcCB7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcclxuICAgIGZvbnQtc2l6ZTogdmFyKC0tc3MtcmVtLTcpO1xyXG4gICAgZm9udC13ZWlnaHQ6IHZhcigtLWZvbnQtd2VpZ2h0LTMpO1xyXG4gIH1cclxuXHJcbiAgLmp1bWJvdHJvbiB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1wcmltYXJ5LTEwMCk7XHJcbiAgICBwYWRkaW5nOiB2YXIoLS1zcy1yZW0tOSkgdmFyKC0tc3MtcmVtLTYpIHZhcigtLXNzLXJlbS02KTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG5cclxuICAgIGdyaWQtY29sdW1uOiBmdWxsLXN0YXJ0IC8gZnVsbC1lbmQ7XHJcblxyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWl0ZW1zOiBzdGFydDtcclxuICAgIHJvdy1nYXA6IHZhcigtLXNzLXJlbS04KTtcclxuICB9XHJcbjwvc3R5bGU+XHJcblxyXG48c3ZlbHRlOmhlYWQ+XHJcbiAgPFRpdGxlPkhvbWU8L1RpdGxlPlxyXG48L3N2ZWx0ZTpoZWFkPlxyXG5cclxuPGRpdiBjbGFzcz1cImp1bWJvdHJvblwiPlxyXG4gIDxkaXY+XHJcbiAgICA8aDE+XHJcbiAgICAgIDxzcGFuIGNsYXNzPVwic3ViXCI+SGksIEkgYW08L3NwYW4+XHJcbiAgICAgIDxzcGFuIGNsYXNzPVwibWFpblwiPldhbGUgT3lleWlwbzwvc3Bhbj5cclxuICAgIDwvaDE+XHJcbiAgICA8cD5Tb2Z0d2FyZSBFbmdpbmVlci9Xcml0ZXIgd2hvIGxvdmVzIHRvIHNvbHZlIHByb2JsZW1zIGFuZCB0ZWFjaC48L3A+XHJcbiAgPC9kaXY+XHJcbiAgPFNvY2lhbCAvPlxyXG48L2Rpdj5cclxuXHJcbjxBcnRpY2xlcyB7YXJ0aWNsZXN9IC8+XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQWtEaUIsR0FBSzs7OztnQ0FBVixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBQUMsR0FBSzs7OzsrQkFBVixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFHUyxHQUFJLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eURBRFMsR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Z0VBQzVCLEdBQUksSUFBQyxLQUFLOztrRkFEUyxHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFQN0MsR0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFQLEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0E1Q0YsUUFBUTtLQUVmLFdBQVcsR0FBRyxRQUFRLENBQUMsT0FBTztPQUM1QixPQUFPLEdBQUcsV0FBVyxJQUFJLFNBQVMsSUFBSSxXQUFXLENBQUMsTUFBTSxJQUFJLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBRWhFLEtBQUssR0FBRyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VDSEEsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPO09BQ25DLFFBQVEsU0FBUyxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU87RUFDMUMsTUFBTSxFQUFFLEtBQUs7RUFDYixPQUFPO0dBQ0wsY0FBYyxFQUFFLGtCQUFrQjtHQUNsQyxNQUFNLEVBQUUsa0JBQWtCOzs7O09BSXhCLFFBQVEsU0FBUyxRQUFRLENBQUMsSUFBSTs7S0FFaEMsUUFBUSxDQUFDLEtBQUs7U0FDVCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEtBQUs7OztVQUlqRCxRQUFROzs7O09BVUQsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
