import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, D as create_slot, v as validate_slots, t as text, p as claim_text, l as insert_dev, g as detach_dev, e as element, c as claim_element, f as children, j as add_location, m as append_dev, E as update_slot, A as transition_in, B as transition_out } from './client.6c6b8b81.js';

const baseUrl = "http://localhost:8000" ;

/* src\components\Title.svelte generated by Svelte v3.24.1 */

const file = "src\\components\\Title.svelte";

// (2:8) Hello
function fallback_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Hello");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Hello");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(2:8) Hello",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title;
	let t;
	let current;
	const default_slot_template = /*$$slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	const block = {
		c: function create() {
			title = element("title");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = text("\r\n  | Wale Oyeyipo (Software Engineer/Writer)");
			this.h();
		},
		l: function claim(nodes) {
			title = claim_element(nodes, "TITLE", {});
			var title_nodes = children(title);
			if (default_slot_or_fallback) default_slot_or_fallback.l(title_nodes);
			t = claim_text(title_nodes, "\r\n  | Wale Oyeyipo (Software Engineer/Writer)");
			title_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(title, file, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(title, null);
			}

			append_dev(title, t);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Title> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Title", $$slots, ['default']);

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, $$slots];
}

class Title extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Title",
			options,
			id: create_fragment.name
		});
	}
}

export { Title as T, baseUrl as b };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGl0bGUuMmIzZjBkY2QuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvX2NvbW1vbi9jb25mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBiYXNlVXJsID0gcHJvY2Vzcy5iYXNlVXJsIHx8IFwiaHR0cDovL2xvY2FsaG9zdDo4MDAwXCI7XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFZLE1BQUMsT0FBTyxHQUFHLHVCQUFlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
